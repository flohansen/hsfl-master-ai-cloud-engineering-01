// Code generated by MockGen. DO NOT EDIT.
// Source: products/controller.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=_mocks/controller.go -source=products/controller.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// DeleteProduct mocks base method.
func (m *MockController) DeleteProduct(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockControllerMockRecorder) DeleteProduct(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockController)(nil).DeleteProduct), arg0, arg1)
}

// GetProduct mocks base method.
func (m *MockController) GetProduct(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetProduct", arg0, arg1)
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockControllerMockRecorder) GetProduct(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockController)(nil).GetProduct), arg0, arg1)
}

// GetProducts mocks base method.
func (m *MockController) GetProducts(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetProducts", arg0, arg1)
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockControllerMockRecorder) GetProducts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockController)(nil).GetProducts), arg0, arg1)
}

// PostProducts mocks base method.
func (m *MockController) PostProducts(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostProducts", arg0, arg1)
}

// PostProducts indicates an expected call of PostProducts.
func (mr *MockControllerMockRecorder) PostProducts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProducts", reflect.TypeOf((*MockController)(nil).PostProducts), arg0, arg1)
}

// PutProduct mocks base method.
func (m *MockController) PutProduct(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutProduct", arg0, arg1)
}

// PutProduct indicates an expected call of PutProduct.
func (mr *MockControllerMockRecorder) PutProduct(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutProduct", reflect.TypeOf((*MockController)(nil).PutProduct), arg0, arg1)
}
